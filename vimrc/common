" vim: syntax=vim

"Use Vim settings, rather then Vi settings (much better!).
"This must be first, because it changes other options as a side effect.
set nocompatible

" Load pathogen
execute pathogen#infect()
filetype plugin indent on

" Enable syntax hightlighting
syntax on

" mark the ideal max text width
set colorcolumn=+1

" Enable 256 colors:
set t_Co=256
set background=dark
colorscheme solarized

" Jump to the last position when " reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

set modelines=5

" Set tabs to 4 spaces:
set tabstop=4
set shiftwidth=4
" We want backspace to delete spaces as if they were tabs:
set softtabstop=4
set expandtab
set shiftround

" Confirm the default
set encoding=utf-8
" Minimal number of screen lines to keep above and below the cursor
set scrolloff=5
set autoindent
" Show possibles matches when browsing for a file
set wildmenu
set wildmode=list:longest
set visualbell
" Highlight current line:
" hi cursorline cterm=None ctermbg=0
" set cursorline
" Redraw faster on modern terminals:
set ttyfast
" Always show status line:
set laststatus=2
" More advanced status line:
set statusline=%<%F\ %h%m%r%=%-14.(%l/%L,%c%V%)\ %P
" Show line numbers:
set number
" Show title in console title bar:
set title
" Allow backspace to jump to previousline
set backspace=indent,eol,start
" Allow non-visible buffers to be hidden but unsaved
set hidden
set foldcolumn=1
" Colors for fold column:
hi FoldColumn ctermbg=8
" Show up to 30 fileanmes in tabview
set tabpagemax=30
" current directory is always matching the
" content of the active window
set autochdir
autocmd BufEnter * silent! lcd %:p:h

" printing stuff
set pdev=pacol165
set printoptions=paper:A4,duplex:long,left:5pc,number:y,portrait:y
" set print font:
set printfont=courier:h8

" remap ` to ' (to restore maps)
nnoremap ' `
nnoremap ` '

" Set the leader to ,
let mapleader = "\<Space>"

" Set search options:
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
" Mapping to lear current search highlights
nnoremap <leader><space> :noh<cr>

" Mapping for changing windows:
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Map clear screen
nnoremap <leader><C-l> :redraw!<CR>

set wrap
set textwidth=79
set formatoptions=qrn1
" We only want this in mutt:
" set colorcolumn=78
" hi ColorColumn ctermbg=0 guibg=0

" Keep a longer history:
set history=1000

" have the h and l cursor keys wrap between lines (like <Space> and <BkSpc> do
" by default), and ~ covert case over line breaks; also have the cursor keys
" wrap in insert mode:
set whichwrap=h,l,~

" Show hidden characters
"set list
set listchars=tab:â–¸\ ,eol:Â¬
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Set dark colors to tabs and eol chars:
highlight NonText cterm=None ctermfg=0
highlight SpecialKey cterm=None ctermfg=0
highlight Search ctermbg=DarkYellow ctermfg=Black

set backupdir=~/.vimbackup//
set directory=~/.vimbackup//

" NERD_tree config
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeWinSize=40
let NERDTreeMouseMode = 2
let NERDTreeQuitOnOpen = 0
" map <F3> :NERDTreeToggle<CR>
map <F3> :NERDTreeTabsToggle<CR>
" NERDSpace config
" Add one space after comments:
let NERDSpaceDelims=1

" gundo.vim config
nnoremap <F7> :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

" Map set paste
set pastetoggle=<F4>
" Toggle line number and folcolumn
function ToggleFoldColumn()
   if &foldcolumn == 0
     set foldcolumn=1
   else
     set foldcolumn=0
   endif
endfunction
nnoremap <F6> :set spell!<CR>
if version >= 700
    " Allow to undo after close/re-open a file:
    set undofile
    set undodir=~/.vimundo/
    "    nnoremap <F2> :set norelativenumber!<CR>:call ToggleFoldColumn()<CR>
endif
nnoremap <F2> :set nonumber!<CR>:call ToggleFoldColumn()<CR>

" Map toggle mouse
nnoremap <F8> :call ToggleMouse()<CR>
function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse usage disabled"
  else
    set mouse=a
    echo "Mouse usage enabled"
  endif
endfunction

" Remap sparkup:
"let sparkupExecuteMapping = '<c-h>'

function! CleverTab()
  if pumvisible()
    return "\<C-N>"
  endif
  if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
    return "\<Tab>"
  elseif exists('&omnifunc') && &omnifunc != ''
    return "\<C-X>\<C-O>"
  else
    return "\<C-N>"
  endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" Automatically close the scratch buffer with omnicomplete
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
" Set max sixie for scratch buffer:
set previewheight=6

" Set colors for omnicomplete:
highlight Pmenu ctermbg=8
highlight PmenuSel ctermbg=4
highlight PmenuSbar ctermbg=0

" Enable ctags
" set tags+=$HOME."/vim/tags".
" map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" Autogenerate ctags on save:
" au FileType {c,cpp,python} au BufWritePost silent! !ctags -R &



" let Tlist_Ctags_Cmd = "/usr/bin/ctags"
" let Tlist_WinWidth = 40
" let Tlist_Show_One_File = 1
" let Tlist_Use_Right_Window = 1
" let Tlist_Use_SingleClick = 1
" let Tlist_Enable_Fold_Column = 0
" let Tlist_Exit_OnlyWindow = 1
" map <F5> :TlistToggle<cr>
nmap <F5> :TagbarToggle<CR>

" Tagbar

let g:tagbar_foldlevel = 0


" Easymotion:
let g:EasyMotion_leader_key = '<Leader>'
"let EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

set novisualbell

let &titlestring = "vim(" . expand("%:t") . ")"
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif


" syntastic
" error window automatically open or closed:
let g:syntastic_auto_loc_list=1
let g:syntastic_python_pep8_args='--ignore=E501,E121,W191,E201,E202,E122,E123,E126,E128,E101,E265,E402'
let g:syntastic_python_pylint_args='--disable=C0330'
let g:syntastic_aggregate_errors=1
let g:syntastic_python_checkers=['pylint', 'pep8']
let g:syntastic_javascript_checkers=['eslint']
"let g:syntastic_debug = 1
let g:syntastic_javascript_eslint_exec = '/home/mandre/.npm-global/bin/eslint'


nnoremap <leader><tab> :lnext<cr>

vnoremap <leader>a :EasyAlign<Enter>

" CtrlP
let g:ctrlp_map = '<leader>o'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*.pyc,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

" Jedi-vim
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0

" Open new cursor on the right
set splitright

" vim-airline
let g:airline_inactive_collapse=0
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
"let g:airline#extensions#branch#use_vcscommand = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tagbar#flags = 'f'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'

au BufNewFile,BufRead *.html set filetype=htmldjango
au BufNewFile,BufRead *.es6 set filetype=javascript


nnoremap <leader><space> :noh<cr>

nnoremap <leader>s :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Remove whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e

" Nerdcommenter
let g:NERDDefaultAlign = 'left'
